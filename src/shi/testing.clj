(ns shi.testing
  (:gen-class))
(require '[shi.api.keystone :as ks])
(require '[shi.api.glance :as gl])
(require '[shi.api.nova :as nova])
(require '[shi.environment.config :as cfg])
(require '[shi.rest :as sr])
(require '[clojure.pprint :as cpp])
(require '[clojure.reflect :as refl])
(require '[cheshire.core :as ches])
(require '[org.httpkit.client :as http])
(require '[clj-ssh.cli :as sshc])
(require '[clj-commons-exec :as exec])

(import '[shi.api.keystone Credentials CredentialsV3 ProjectV3 UserV3])

(def cred3 (ks/make-creds-v3 :userid ((cfg/conf) :user-name)
                             :auth-url ((cfg/conf) :auth-url)
                             :authmethod "password"
                             :secret ((cfg/conf) :user-pass)))
(def auth (ks/authorize cred3))
(def catalog (ks/get-catalog auth))


(defn -main []
  (let [catalog (ks/get-catalog auth)
        images (:body (gl/image-list auth))
        keystone (ks/get-service [:keystone] catalog)
        {:keys [url token]} (ks/get-rest-basics auth :keystone)
        flavors (nova/flavors-list auth)]
    (println "Response: ")
    (cpp/pprint (dissoc auth :headers))
    (println "================================")
    (println "Catalog: ")
    (cpp/pprint catalog)
    (println "================================")
    (println "Keystone: ")
    (cpp/pprint (first keystone))
    (println "================================")
    (println "Images:")
    (cpp/pprint images)
    (println "================================")
    (println "Url:" url)
    (println "================================")
    (println "Flavors:")
    (cpp/pprint (:body flavors))
    (println "================================")
    ))